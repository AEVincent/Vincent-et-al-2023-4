sec_wide$clust[probs<(1-pcutoff)] = 2
sec_wide$probs = probs
sec_wide$biochem = "Unknown"
sec_wide$biochem[sec_wide$clust==1] = "Normal"
sec_wide$biochem[sec_wide$clust==2] = "Deficient"
if(mb$G==1) {
sec_wide$biochem = "Unknown"
sec_wide$clust = 0
}
bc = sec_wide$biochem
names(bc) = sec_wide$ID
return(bc)
}
multiD_cluster = function(sec, Nclust, cluster_chans = c("MTCO1","VDAC","NDUFB8")){
sec_wide = reshape(sec[,c("Corrected","Chan","ID","SectionID")], #picks data from all row and selected channels
idvar = c("ID","SectionID"), #define identifiers of row, ID for fibres and SectionID for sections/regions/observer
timevar = "Chan", direction="wide")
colnames(sec_wide) = gsub("Corrected.","",colnames(sec_wide))
sec_w = log(sec_wide[,cluster_chans[cluster_chans%in%colnames(sec_wide)]])
keepsec = !is.na(rowSums(sec_w))
sec_w = sec_w[keepsec,]
sec_wide = sec_wide[keepsec,]
mb = Mclust(sec_w, Nclust)
bc = mb$classification
names(bc) = sec_wide$ID
return(bc)
}
ctrl_ids = c("C01","C02","C03","C04")
pdat$Corrected = pdat$Value
pdat$Chan = pdat$Channel
pdat$SectionID = pdat$patient_id
##MITO DATASET
oxp = c("VDAC","NDUFB8", "CYB", "MTCO1", "ATP5B", "COX4", "ND4", "OSCP", "SDHA", "UqCRC2")
CI = c("VDAC", "NDUFB8", "ND4")
NDUFB8 = c("VDAC", "NDUFB8")
ND4 = c("VDAC", "ND4")
CIII = c("VDAC", "CYB")
CIV = c("VDAC", "MTCO1", "COX4")
MTCO1 = c("VDAC", "MTCO1")
COX4 = c("VDAC", "COX4")
CV = c("VDAC", "ATP5B", "OSCP")
OSCP = c("VDAC", "OSCP")
ATP5B = c("VDAC", "ATP5B")
##SIGNALLING DATASET
#oxp = c("VDAC","NDUFB8", "CYB", "MTCO1")
#CI = c("VDAC", "NDUFB8")
#CIII = c("VDAC", "CYB")
#morph = c("Area","AspectRatio","Perimeter","Circularity","xCoord","yCoord")
#CIV = c("VDAC", "MTCO1")
#nolog = chans[!grepl("LOG",chans)]
#justprots = nolog[!nolog%in%c("Mean","Edges",morph)]
#Sig1 = c("Htra2", "HexokinaseII")
#Sig2 = c("Hsp60", "LONP1", "PDHE2", "SIRT3", "Prohibitin", "TFAM", "ATF4", "ATF6", "Beclin")
#UPR = c("HSP60", "Htra2", "CHOP", "ClpP")
#Biogen = c("PGC1a", "SIRT3", "TFAM")
#Mitopro = c("Prohibitin", "TFAM", "LONP1")
ids = sort(unique(pdat$patient_id))
patids = ids[!ids%in%ctrl_ids]
#for (btypes in c("oxphos","cI", "cIII", "cIV", "signal","oxsig","oxsigmorph", "sig1", "sig2", "upr", "biogen", "mitopro")){
for (btypes in c("oxphos","cI","NDUFB8", "ND4", "cIII", "cIV", "MTCO1", "COX4", "cV", "OSCP", "ATP5B")){
#for (btypes in c("oxphos")){
patlist = list()
for(patid in patids){
print(btypes)
print(patid)
#patid = patids[1]
pat = pdat[pdat$patient_id==patid,]
ctrls = pdat[pdat$patient_id%in%ctrl_ids,]
# OXPHOS only
if (btypes=="oxphos") biochem = gmm_cluster(ctrls,pat,cluster_chans=oxp)
# CI only
if (btypes=="cI") biochem = gmm_cluster(ctrls,pat,cluster_chans=CI)
# NDUFB8 only
if (btypes=="ndufb8") biochem = gmm_cluster(ctrls,pat,cluster_chans=NDUFB8)
# ND4 only
if (btypes=="nd4") biochem = gmm_cluster(ctrls,pat,cluster_chans=ND4)
# CIII only
if (btypes=="cIII") biochem = gmm_cluster(ctrls,pat,cluster_chans=CIII)
# CIV only
if (btypes=="cIV") biochem = gmm_cluster(ctrls,pat,cluster_chans=CIV)
# MTCO1 only
if (btypes=="mtco1") biochem = gmm_cluster(ctrls,pat,cluster_chans=MTCO1)
# COX4 only
if (btypes=="cox4") biochem = gmm_cluster(ctrls,pat,cluster_chans=COX4)
# CV only
if (btypes=="cV") biochem = gmm_cluster(ctrls,pat,cluster_chans=CV)
# OSCP only
if (btypes=="oscp") biochem = gmm_cluster(ctrls,pat,cluster_chans=OSCP)
# ATP5B only
if (btypes=="atp5b") biochem = gmm_cluster(ctrls,pat,cluster_chans=ATP5B)
# SIGNALLING only
#if (btypes=="signal") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=justprots[!justprots%in%oxp])
# OXPHOS & SIGNALLING
#if (btypes=="oxsig") biochem = multiD_cluster(pat, Nclust = 3, cluster_chans=justprots)
# OXPHOS & SIGNALLING & MORPHOLOGY
#if (btypes=="oxsigmorph") biochem = multiD_cluster(pat, Nclust = 3, cluster_chans=c(justprots,morph))
# Htra2 and HKII
#if (btypes=="sig1") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Sig1))
# Linear trend sig with small increase at end
#if (btypes=="sig2") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Sig2))
# Unfolded protein response
#if (btypes=="upr") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(UPR))
# Biogenesis signalling
#if (btypes=="biogen") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Biogen))
# Mito protein synth
#if (btypes=="mitopro") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Mitopro))
# Note that length of pat should be a multiple of the length of biochem:
length(pat$Value)/length(biochem)
# There are 58 channels in pat (including LOG versions)
# Add biochem to pat
# Generate a dummy "channel"
dummy = pat[pat$Chan=="Area",]
dummy$Chan = "RCstatus"
dummy$Channel = "RCstatus"
dummy$Value = biochem
dummy$Corrected = biochem
# Patch onto end of pat
pat = rbind(pat,dummy)
patlist[[patid]] = pat
}
# Check data are sensible
head(patlist[["P01"]])
pdatnew = do.call("rbind",patlist)
head(pdatnew)
###Generate plots of clustering
pdf(paste(btypes,"GMM_biochem.pdf",sep=""),width=11.69,height=8.27)
pdat_wide = reshape(pdatnew[,c("Corrected","Chan","ID","SectionID")], idvar = c("ID","SectionID"),
timevar = "Chan", direction="wide")
ctrls_wide = reshape(ctrls[,c("Corrected","Chan","ID","SectionID")], idvar = c("ID","SectionID"),
timevar = "Chan", direction="wide")
colnames(pdat_wide) = gsub("Corrected.","",colnames(pdat_wide))
colnames(ctrls_wide) = gsub("Corrected.","",colnames(ctrls_wide))
pats = sort(unique(pdat_wide$SectionID))
for(patid in pats){
mitochan = "VDAC"
df = subset(pdat_wide, SectionID==patid)
allchans = gsub("LOG_","",colnames(dat)[grepl("LOG",colnames(dat))])
chans = allchans
chanvec = chans[chans%in%colnames(df)]
##Calculate percentages
N = length(df$ID)
Pos = sum(df$RCstatus=="Normal",na.rm=TRUE)/N
nk = sum(df$RCstatus=="Unknown",na.rm=TRUE)/N
Def = sum(df$RCstatus=="Deficient",na.rm=TRUE)/N
mlab = paste0("Pos: ",signif(100*Pos,3),"% Def: ", signif(100*Def,3), "%")
cols = c(rgb(1,0,0,0.2), rgb(0.6,0.2,0.8,0.2), rgb(0,0,1,0.2))
names(cols) = c("Deficient","Unknown","Normal")
# multiD_cluster does not define fibres as "Normal", "Deficient", "Unknown", since clusters don't have that oxphos defect interpretation
# So, for output from multiD_cluster, we should use a different colouring scheme
if(typeof(df$RCstatus)=="double"){
cols = rainbow(n=max(df$RCstatus),alpha=0.2)
# Plot label which doesn't refer to oxphos status
ntab = 100*table(df$RCstatus)/N
mlab = paste(paste0(paste0("C",names(ntab),": "),signif(ntab,3),"%"),collapse=" ")
}
df$col = cols[df$RCstatus]
##Plotting
op = par(mfrow=c(3,4),mai=c(0.55,0.6,0.2,0.1))
for(chan in chans[chans!=mitochan]){
xpat = log(as.numeric(df[[mitochan]]))
ypat = log(as.numeric(df[[chan]]))
xctrl = log(as.numeric(ctrls_wide[[mitochan]]))
yctrl = log(as.numeric(ctrls_wide[[chan]]))
# https://stackoverflow.com/questions/16225530/contours-of-percentiles-on-level-plot
dens = kde2d(xctrl, yctrl, n=200); ## estimate the z counts
prob = c(0.95, 0.5)
dx = diff(dens$x[1:2])
dy = diff(dens$y[1:2])
sz = sort(dens$z)
c1 = cumsum(sz) * dx * dy
levs = sapply(prob, function(x) {
approx(c1, sz, xout = 1 - x)$y
})
if(sum(is.na(df[[chan]]))==length(df[[chan]])){
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5,chan)
}else{
plot(xpat,ypat, pch=19, col=df$col, xlab=paste("LOG",mitochan,sep="_"), ylab = paste("LOG",chan,sep="_"),
main = mlab,cex.lab=2,cex.main=1.0,cex.axis=1.75,xlim=range(c(xpat,xctrl)),ylim=range(c(ypat,yctrl)))
abline(v=1.34, col="black", lty=4, lwd=1) # 1.34 represents the bootstrapped cut of for predicting RRF
contour(dens, levels=levs, labels=prob, add=T,lwd=2)
}
}
mtext(patid, outer=TRUE,  cex=1, line=-2.0,at=0.52,side=3) ##problem with alpha in line above
par(op)
}
dev.off()
##Write table with additional column to store data, if rerun clustering rewrite table
write.csv(pdat_wide, file=paste(btypes,"GMM_biochem.csv",sep=""),row.names=FALSE)
}
##investigating area in sig1 clustering
sig1dat<-read.csv("oxphosGMM_biochem.csv", header=T)
#Function SEM
sem = function(x){
sd(x)/sqrt(length(x))
}
pdf("newstripchart.pdf",width=6,height=8)
pats = sort(unique(sig1dat$SectionID))
for(patid in patids){
df = subset(sig1dat, SectionID==patid)
Num = length(df$ID)
op = par(mfrow=c(2,3))
for(m in gsub("-",".",justprots)){
my_mean = mean(df[[m]])
my_sem = sem(df[[m]])
stripchart(df[[m]] ~ df$RCstatus,vertical=TRUE,method="jitter",jitter=0.1,pch=16,col=rgb(1,0,0,0.1),cex=1.25,
main = paste(patid, "N =", Num), xlab = "Cluster", ylab = m,cex.lab=1.35)
boxplot(df[[m]] ~ df$RCstatus, data = df,add=TRUE,outline=FALSE,notch=TRUE,col=NULL,boxwex=0.3,lwd=2)
}
par(op)
}
dev.off()
d<-read.csv("mitocyto_merged_results.csv", header=T)
pdat = read.delim("mitocyto_merged_results.csv",sep=",",stringsAsFactors=FALSE)
# Generate a vector of IDs
pats = c(sprintf("P%02d",1:12),sprintf("C%02d",1:4))
# Name the elements of the vector using key from separate file.  This links M-numbers with new patient IDs "M0670-16","M0675-16"
names(pats) = c("M0664-16","M0666-16","M0668-16","M0667-16","M0665-16","M0164-12","M0671-16","M0674-16", "M0670-16", "M0675-16", "M1105-10","M0109-19","M1180-16","M1212-16","M1217-16","M1089-16")
pdat = pdat[pdat$Filename %in% names(pats),]
# Drop P08 because patient is missing
#pats = pats[pats!= "P12"]
#pats = pats[pats!="C03"]
pdat = pdat[pdat$Filename %in% names(pats),]
# Generate patient_id from named vector linking M-numbers with patient IDs:
pdat$patient_id = pats[pdat$Filename]
# Same trick to rename channels: set up a named vector and use it to map from ugly channel names to pretty channel names
chans = c("CYB", "LOG_CYB", "VDAC", "LOG_VDAC", "SDHA", "LOG_SDHA", "MTCO1", "LOG_MTCO1", "NDUFB8", "LOG_NDUFB8", "OSCP", "LOG_OSCP", "ND4", "LOG_ND4", "COX4", "LOG_COX4", "ATP5B", "LOG_ATP5B",
"UqCRC2", "LOG_UqCRC2", "Dystrophin", "LOG_Dystrophin", "DNA1", "LOG_DNA1", "DNA2", "LOG_DNA2", "Mean","Edges","Area","AspectRatio","Perimeter","Circularity","xCoord","yCoord")
names(chans) = c("115In_CYB", "LOG_115In_CYB", "147Sm_VDAC1", "LOG_147Sm_VDAC1", "153Eu_SDHA", "LOG_153Eu_SDHA", "158Gd_MTCO1", "LOG_158Gd_MTCO1", "160Gd_NDUFB8", "LOG_160Gd_NDUFB8", "161Dy_OSCP", "LOG_161Dy_OSCP", "164Dy_ND4", "LOG_164Dy_ND4", "168Er_COX4", "LOG_168Er_COX4", "170Yb_ATP5B", "LOG_170Yb_ATP5B",
"174Yb_UqCRC2", "LOG_174Yb_UqCRC2", "176Yb_Dystrophin", "LOG_176Yb_Dystrophin", "191Ir_DNA1", "LOG_191Ir_DNA1", "193Ir_DNA2", "LOG_193Ir_DNA2", "Mean","Edges","Area","AspectRatio","Perimeter","Circularity","xCoord","yCoord")
# Discard data where channel name not listed above
pdat = pdat[pdat$Channel %in% names(chans),]
# Then rename as above
pdat$Channel = chans[pdat$Channel]
# Named vectors are really useful, have a look at them:
print(chans)
print(pats)
###reshape data to wide
dat <- spread(pdat, Channel, Value)
head(dat)
###Generate control df
datac = subset(dat, patient_id%in%c("C01","C02","C03","C04"))
library(mclust)
library(Hotelling)
getvec = function(dat){
pc = princomp(dat)
vec = pc$loadings[,1]
return(list(vec=vec,cen=pc$center))
}
gmm_cluster = function(ctrls,sec,pcutoff = 0.6,Nsamps = 150000, cluster_chans = c("MTCO1","VDAC1","NDUFB8","CYB"), dist_cutoff = 0.5, cluster_cutoff = 0.95){
sec = sec[sec$Channel%in%unique(ctrls$Channel),]
ctrls$Corrected = as.numeric(ctrls$Corrected)
sec$Corrected = as.numeric(sec$Corrected)
# GMM clustering
ctrls_wide = reshape(ctrls[,c("Corrected","Chan","ID","SectionID")], #picks data from all row and selected channels
idvar = c("ID","SectionID"), #define identifiers of row, ID for fibres and SectionID for sections/regions/observer
timevar = "Chan", direction="wide")
colnames(ctrls_wide) = gsub("Corrected.","",colnames(ctrls_wide))
sec_wide = reshape(sec[,c("Corrected","Chan","ID","SectionID")], #picks data from all row and selected channels
idvar = c("ID","SectionID"), #define identifiers of row, ID for fibres and SectionID for sections/regions/observer
timevar = "Chan", direction="wide")
colnames(sec_wide) = gsub("Corrected.","",colnames(sec_wide))
sec_w = log(sec_wide[,cluster_chans])
ctrls_w = log(ctrls_wide[,cluster_chans])
keepsec = !is.na(rowSums(sec_w))
keepctrls = !is.na(rowSums(ctrls_w))
sec_w = sec_w[keepsec,]
ctrls_w = ctrls_w[keepctrls,]
ctrls_wide = ctrls_wide[keepctrls,]
sec_wide = sec_wide[keepsec,]
mb = Mclust(sec_w,1:2)
if(max(mb$BIC[1,],na.rm=TRUE)>cluster_cutoff*max(mb$BIC[2,],na.rm=TRUE)){ # If two clusters are not much better than one cluster, just use one:
mb = Mclust(sec_w,1)
}
samplerows = function(df,N){
return(df[sample(nrow(df),N,replace=TRUE),])
}
diffdfs = function(df1,df2){
return(as.numeric(sqrt(rowSums((df1-df2)^2))))
}
patvals = sec_w[mb$z[,1]>pcutoff,]
if(mb$G==2){
# If first principle component of c1 is more similar to ctrl than 1st PC of c2 is to ctrl
c1 = sec_w[mb$z[,1]>pcutoff,]
c2 = sec_w[mb$z[,1]<(1-pcutoff),]
diffslopes = function(ctrls_w,c1,c2){
ct_pc = getvec(ctrls_w)
c1_pc = getvec(c1)
c2_pc = getvec(c2)
c1dist = dist(rbind(ct_pc$vec,c1_pc$vec))[1]
c2dist = dist(rbind(ct_pc$vec,c2_pc$vec))[1]
return(c2dist<c1dist)
}
ds = replicate(1000,diffslopes(ctrls_w[sample(nrow(ctrls_w), nrow(ctrls_w), replace=TRUE),],c1[sample(nrow(c1), nrow(c1), replace=TRUE),],c2[sample(nrow(c2), nrow(c2), replace=TRUE),]))
print(mean(ds))
cert = 0.7 # Should be between 0.5 and 1.0
if((mean(ds)>=cert)|(mean(ds)<=(1-cert))){  # IF we are certain about the label order based on slope
print("Ordering labels based on 1st PC")
if(mean(ds)>0.5){probs=mb$z[,2]}else{probs=mb$z[,1]}
}else{
print("Ordering labels based on Euclidean distance")
ctmed = apply(ctrls_w,2,median)
c1med = apply(c1,2,median)
c2med = apply(c2,2,median)
d1 = as.numeric(dist(rbind(c1med,ctmed)))
d2 = as.numeric(dist(rbind(c2med,ctmed)))
if(d2<d1){probs=mb$z[,2]}else{probs=mb$z[,1]}
}
}else{
ctsA = samplerows(ctrls_w,Nsamps)
ctsB = samplerows(ctrls_w,Nsamps)
z1 = samplerows(sec_w[mb$z[,1]>pcutoff,],Nsamps)
ctrlctrl = diffdfs(ctsA,ctsB)
ctrlpat = diffdfs(ctsA,z1)
plot(density(ctrlctrl),main="",xlab="Euclidean distance")
points(density(ctrlpat),col="red",type="l")
legend("topright",c("Between control fibres","Between patient and control fibres"),col=c("black","red"),lwd=1)
print(mean(ctrlpat))
if(mean(ctrlpat)>0.5){probs = 1.0-mb$z[,1]}else{probs = mb$z[,1]}
res = hotelling.test(ctrls_w,sec_w[mb$z[,1]>pcutoff,],perm=TRUE)
print(res)
}
sec_wide$clust = 0
sec_wide$clust[probs>pcutoff] = 1
sec_wide$clust[probs<(1-pcutoff)] = 2
sec_wide$probs = probs
sec_wide$biochem = "Unknown"
sec_wide$biochem[sec_wide$clust==1] = "Normal"
sec_wide$biochem[sec_wide$clust==2] = "Deficient"
if(mb$G==1) {
sec_wide$biochem = "Unknown"
sec_wide$clust = 0
}
bc = sec_wide$biochem
names(bc) = sec_wide$ID
return(bc)
}
library(MASS)
multiD_cluster = function(sec, Nclust, cluster_chans = c("MTCO1","VDAC","NDUFB8")){
sec_wide = reshape(sec[,c("Corrected","Chan","ID","SectionID")], #picks data from all row and selected channels
idvar = c("ID","SectionID"), #define identifiers of row, ID for fibres and SectionID for sections/regions/observer
timevar = "Chan", direction="wide")
colnames(sec_wide) = gsub("Corrected.","",colnames(sec_wide))
sec_w = log(sec_wide[,cluster_chans[cluster_chans%in%colnames(sec_wide)]])
keepsec = !is.na(rowSums(sec_w))
sec_w = sec_w[keepsec,]
sec_wide = sec_wide[keepsec,]
mb = Mclust(sec_w, Nclust)
bc = mb$classification
names(bc) = sec_wide$ID
return(bc)
}
ctrl_ids = c("C01","C02","C03","C04")
pdat$Corrected = pdat$Value
pdat$Chan = pdat$Channel
pdat$SectionID = pdat$patient_id
##MITO DATASET
oxp = c("VDAC","NDUFB8", "CYB", "MTCO1", "ATP5B", "COX4", "ND4", "OSCP", "SDHA", "UqCRC2")
CI = c("VDAC", "NDUFB8", "ND4")
NDUFB8 = c("VDAC", "NDUFB8")
ND4 = c("VDAC", "ND4")
CIII = c("VDAC", "CYB")
CIV = c("VDAC", "MTCO1", "COX4")
MTCO1 = c("VDAC", "MTCO1")
COX4 = c("VDAC", "COX4")
CV = c("VDAC", "ATP5B", "OSCP")
OSCP = c("VDAC", "OSCP")
ATP5B = c("VDAC", "ATP5B")
##SIGNALLING DATASET
#oxp = c("VDAC","NDUFB8", "CYB", "MTCO1")
#CI = c("VDAC", "NDUFB8")
#CIII = c("VDAC", "CYB")
#morph = c("Area","AspectRatio","Perimeter","Circularity","xCoord","yCoord")
#CIV = c("VDAC", "MTCO1")
#nolog = chans[!grepl("LOG",chans)]
#justprots = nolog[!nolog%in%c("Mean","Edges",morph)]
#Sig1 = c("Htra2", "HexokinaseII")
#Sig2 = c("Hsp60", "LONP1", "PDHE2", "SIRT3", "Prohibitin", "TFAM", "ATF4", "ATF6", "Beclin")
#UPR = c("HSP60", "Htra2", "CHOP", "ClpP")
#Biogen = c("PGC1a", "SIRT3", "TFAM")
#Mitopro = c("Prohibitin", "TFAM", "LONP1")
ids = sort(unique(pdat$patient_id))
patids = ids[!ids%in%ctrl_ids]
#for (btypes in c("oxphos","cI", "cIII", "cIV", "signal","oxsig","oxsigmorph", "sig1", "sig2", "upr", "biogen", "mitopro")){
for (btypes in c("oxphos","cI","NDUFB8", "ND4", "cIII", "cIV", "MTCO1", "COX4", "cV", "OSCP", "ATP5B")){
#for (btypes in c("oxphos")){
patlist = list()
for(patid in patids){
print(btypes)
print(patid)
#patid = patids[1]
pat = pdat[pdat$patient_id==patid,]
ctrls = pdat[pdat$patient_id%in%ctrl_ids,]
# OXPHOS only
if (btypes=="oxphos") biochem = gmm_cluster(ctrls,pat,cluster_chans=oxp)
# CI only
if (btypes=="cI") biochem = gmm_cluster(ctrls,pat,cluster_chans=CI)
# NDUFB8 only
if (btypes=="ndufb8") biochem = gmm_cluster(ctrls,pat,cluster_chans=NDUFB8)
# ND4 only
if (btypes=="nd4") biochem = gmm_cluster(ctrls,pat,cluster_chans=ND4)
# CIII only
if (btypes=="cIII") biochem = gmm_cluster(ctrls,pat,cluster_chans=CIII)
# CIV only
if (btypes=="cIV") biochem = gmm_cluster(ctrls,pat,cluster_chans=CIV)
# MTCO1 only
if (btypes=="mtco1") biochem = gmm_cluster(ctrls,pat,cluster_chans=MTCO1)
# COX4 only
if (btypes=="cox4") biochem = gmm_cluster(ctrls,pat,cluster_chans=COX4)
# CV only
if (btypes=="cV") biochem = gmm_cluster(ctrls,pat,cluster_chans=CV)
# OSCP only
if (btypes=="oscp") biochem = gmm_cluster(ctrls,pat,cluster_chans=OSCP)
# ATP5B only
if (btypes=="atp5b") biochem = gmm_cluster(ctrls,pat,cluster_chans=ATP5B)
# SIGNALLING only
#if (btypes=="signal") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=justprots[!justprots%in%oxp])
# OXPHOS & SIGNALLING
#if (btypes=="oxsig") biochem = multiD_cluster(pat, Nclust = 3, cluster_chans=justprots)
# OXPHOS & SIGNALLING & MORPHOLOGY
#if (btypes=="oxsigmorph") biochem = multiD_cluster(pat, Nclust = 3, cluster_chans=c(justprots,morph))
# Htra2 and HKII
#if (btypes=="sig1") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Sig1))
# Linear trend sig with small increase at end
#if (btypes=="sig2") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Sig2))
# Unfolded protein response
#if (btypes=="upr") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(UPR))
# Biogenesis signalling
#if (btypes=="biogen") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Biogen))
# Mito protein synth
#if (btypes=="mitopro") biochem = multiD_cluster(pat, Nclust = 1:2, cluster_chans=c(Mitopro))
# Note that length of pat should be a multiple of the length of biochem:
length(pat$Value)/length(biochem)
# There are 58 channels in pat (including LOG versions)
# Add biochem to pat
# Generate a dummy "channel"
dummy = pat[pat$Chan=="Area",]
dummy$Chan = "RCstatus"
dummy$Channel = "RCstatus"
dummy$Value = biochem
dummy$Corrected = biochem
# Patch onto end of pat
pat = rbind(pat,dummy)
patlist[[patid]] = pat
}
# Check data are sensible
head(patlist[["P01"]])
pdatnew = do.call("rbind",patlist)
head(pdatnew)
###Generate plots of clustering
pdf(paste(btypes,"GMM_biochem.pdf",sep=""),width=11.69,height=8.27)
pdat_wide = reshape(pdatnew[,c("Corrected","Chan","ID","SectionID")], idvar = c("ID","SectionID"),
timevar = "Chan", direction="wide")
ctrls_wide = reshape(ctrls[,c("Corrected","Chan","ID","SectionID")], idvar = c("ID","SectionID"),
timevar = "Chan", direction="wide")
colnames(pdat_wide) = gsub("Corrected.","",colnames(pdat_wide))
colnames(ctrls_wide) = gsub("Corrected.","",colnames(ctrls_wide))
pats = sort(unique(pdat_wide$SectionID))
for(patid in pats){
mitochan = "VDAC"
df = subset(pdat_wide, SectionID==patid)
allchans = gsub("LOG_","",colnames(dat)[grepl("LOG",colnames(dat))])
chans = allchans
chanvec = chans[chans%in%colnames(df)]
##Calculate percentages
N = length(df$ID)
Pos = sum(df$RCstatus=="Normal",na.rm=TRUE)/N
nk = sum(df$RCstatus=="Unknown",na.rm=TRUE)/N
Def = sum(df$RCstatus=="Deficient",na.rm=TRUE)/N
mlab = paste0("Pos: ",signif(100*Pos,3),"% Def: ", signif(100*Def,3), "%")
cols = c(rgb(1,0,0,0.2), rgb(0.6,0.2,0.8,0.2), rgb(0,0,1,0.2))
names(cols) = c("Deficient","Unknown","Normal")
# multiD_cluster does not define fibres as "Normal", "Deficient", "Unknown", since clusters don't have that oxphos defect interpretation
# So, for output from multiD_cluster, we should use a different colouring scheme
if(typeof(df$RCstatus)=="double"){
cols = rainbow(n=max(df$RCstatus),alpha=0.2)
# Plot label which doesn't refer to oxphos status
ntab = 100*table(df$RCstatus)/N
mlab = paste(paste0(paste0("C",names(ntab),": "),signif(ntab,3),"%"),collapse=" ")
}
df$col = cols[df$RCstatus]
##Plotting
op = par(mfrow=c(3,4),mai=c(0.55,0.6,0.2,0.1))
for(chan in chans[chans!=mitochan]){
xpat = log(as.numeric(df[[mitochan]]))
ypat = log(as.numeric(df[[chan]]))
xctrl = log(as.numeric(ctrls_wide[[mitochan]]))
yctrl = log(as.numeric(ctrls_wide[[chan]]))
# https://stackoverflow.com/questions/16225530/contours-of-percentiles-on-level-plot
dens = kde2d(xctrl, yctrl, n=200); ## estimate the z counts
prob = c(0.95, 0.5)
dx = diff(dens$x[1:2])
dy = diff(dens$y[1:2])
sz = sort(dens$z)
c1 = cumsum(sz) * dx * dy
levs = sapply(prob, function(x) {
approx(c1, sz, xout = 1 - x)$y
})
if(sum(is.na(df[[chan]]))==length(df[[chan]])){
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5,chan)
}else{
plot(xpat,ypat, pch=19, col=df$col, xlab=paste("LOG",mitochan,sep="_"), ylab = paste("LOG",chan,sep="_"),
main = mlab,cex.lab=2,cex.main=1.0,cex.axis=1.75,xlim=range(c(xpat,xctrl)),ylim=range(c(ypat,yctrl)))
abline(v=1.34, col="black", lty=4, lwd=1) # 1.34 represents the bootstrapped cut of for predicting RRF
contour(dens, levels=levs, labels=prob, add=T,lwd=2)
}
}
mtext(patid, outer=TRUE,  cex=1, line=-2.0,at=0.52,side=3) ##problem with alpha in line above
par(op)
}
dev.off()
